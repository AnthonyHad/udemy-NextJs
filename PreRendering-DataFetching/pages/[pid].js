import fs from 'fs/promises';
import path from 'path';

import { Fragment } from 'react';

function ProductDetailPage(props) {
  const { loadedProduct } = props;

  if (!loadedProduct) {
    return <p>Loading...</p>;
  }
  return (
    <Fragment>
      <h1>{loadedProduct.title}</h1>
      <p>{loadedProduct.description}</p>
    </Fragment>
  );
}

//Since the page is dynamic NextJs does not know how many pages to pre-generate
//dynamic pages are not pre generated by default
export async function getStaticProps(context) {
  // cannot use next router here
  const { params } = context;

  const productId = params.pid;

  const filePath = path.join(process.cwd(), 'data', 'dummy-backend.json');
  const jsonData = await fs.readFile(filePath);
  const data = JSON.parse(jsonData);

  const product = data.products.find((product) => product.id === productId);

  return {
    props: {
      loadedProduct: product,
    },
  };
}

export async function getStaticPaths() {
  //must always return this structure
  return {
    paths: [
      { params: { pid: 'p1' } },
      // { params: { pid: 'p2' } },
      // { params: { pid: 'p3' } },
    ],
    // can help with a lot of pages that need to be regenerated
    //switching to true helps pre generate specific pages and postpone the pre-generation of other pages to just in time
    //using true would need a fallback state in the component function for Loading
    // otherwise we can just use "blocking" as a value
    fallback: 'blocking',
  };
}

export default ProductDetailPage;
